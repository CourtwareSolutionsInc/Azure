@model BaseIssuesModel
 
@if (Model == null || Model.Columns == null)
{
    <table id="tabledata" border="0" ></table>
}
else
{
    List<int> cardIds = new List<int>();
    bool showSequencing = false;
    bool allowSequencing = false;

    if (Model is ItemsGridModel)
    {
        var itemsModel = ((ItemsGridModel)Model);
        showSequencing = itemsModel.ShowSequencing;
        allowSequencing = itemsModel.AllowSequencing;
    }

    if (Model.CurrentPageCard.CardData.Badges.Count > 0)
    {
        var ids = Model.CurrentPageCard.CardData.Badges;
        foreach (var id in ids)
        {
            cardIds.Add(id);
        }
    }
    <table id="tabledata" border="0" >
    <thead>
        <tr>
            <th class="items-first-column">
                @if (allowSequencing && showSequencing)
                {
                    <span class="fonticon-drag-handle dragHandle item-drag-handle invisible"></span>
                    <input type="checkbox" name="check-all-items" id="check-all-items" value="1" class="fancy" />
                }
                else
                {
                    <input type="checkbox" name="check-all-items" id="check-all-items" value="1" class="fancy"/>
                }
            </th>

        @foreach (var property in Model.Columns)
        {
            if (!string.IsNullOrWhiteSpace(property.field) || property.IsCustomField)
            {
                string id = property.IsCustomField ? property.CustomFieldId : property.Attribute.ToString();
                if (property.sortable)
                {
                    if (property.sortDirection == -1)
                    {
            <th class="sortable desc @property.headerCssClass" data-id='@id' >@property.name</th>
                    }
                    else if (property.sortDirection == 1)
                    {
            <th class="sortable asc @property.headerCssClass" data-id='@id'>@property.name</th>
                    }
                    else
                    {
            <th class="sortable @property.headerCssClass" data-id='@id'>@property.name</th>
                    }
                }
                else
                {
            <th data-id='@id' class='align-left'>@property.name</th>
                }
            }
        }
        </tr>
    </thead>
    <tbody>
    @if (Model is ItemsGridModel)
    {
        var itemsModel = ((ItemsGridModel)Model);
        showSequencing = itemsModel.ShowSequencing;
        allowSequencing = itemsModel.AllowSequencing;
        foreach (var issue in itemsModel.SequencedIssues)
        {
            bool firstCol = true;
            var sequenceData = itemsModel.SequencedData[issue.Entity.Id];
            var lastColumn = sequenceData.Count == 0 ? null : sequenceData[sequenceData.Count - 1];
<tr id='tr-issue-@issue.Id' data-issue-id='@issue.Id' data-project-code='@issue.ProjectCode' data-project-id='@issue.Project.Id' class='sequenced-issue @ViewHelpers.HighlightIssueRow(issue, cardIds)'>
<td class='align-left no-wrap items-first-column read-only'>

@if (allowSequencing)
{
<span class="fonticon-drag-handle dragHandle item-drag-handle"></span>
}
<input type="checkbox" class="checked-items fancy" value="@issue.Entity.Id" />
</td>
@foreach (var coldata in sequenceData)
{
<td class='@coldata.cssClass'>
@Html.Raw(coldata.FormattedData)
@if (firstCol)
{
    if (itemsModel.GroupDependencies && issue.Entity.IsParent && !issue.Entity.ParentIssueId.HasValue)
    {
<span class='parent fonticon-arrow-down expander'></span>
    }
    firstCol = false;
}
else if (lastColumn == coldata)
{
<div class='item-context-menu fonticon-dropdown right'></div>
}
</td>
}
</tr>
        }
        if (showSequencing || itemsModel.SequencedIssues.Count > 0)
        {
            <tr class='drop-zone'>
            <td></td>
            @foreach (var property in Model.Columns)
            {
                // Get the property
                if (!string.IsNullOrWhiteSpace(property.field) || property.IsCustomField)
                {
                    <td></td>
                }
            }
            </tr>
        }
    }
    
@foreach (var issue in Model.Issues)
{
    bool firstCol = true;
<tr id='tr-issue-@issue.Id' data-issue-id='@issue.Id' data-project-code='@issue.ProjectCode' data-project-id='@issue.Project.Id' class='@ViewHelpers.HighlightIssueRow(issue, cardIds)'>       
@{
    var data = Model.DisplayData[issue.Entity.Id];
    var lastColumn = data.Count == 0 ? null : data[data.Count - 1];
<td class="align-left no-wrap items-first-column read-only">
@if (allowSequencing && showSequencing)
{
<span class="fonticon-drag-handle dragHandle item-drag-handle"></span>
}
<input type="checkbox" class="checked-items fancy" value="@issue.Entity.Id"/>
</td>
foreach (var coldata in data)
{
<td class='@coldata.cssClass'>

@Html.Raw(coldata.FormattedData)
@if (firstCol)
{
    if (Model.GroupDependencies && issue.Entity.IsParent && !issue.Entity.ParentIssueId.HasValue)
    {
<span class='parent fonticon-arrow-down expander'></span>
    }
    firstCol = false;
}
else if (lastColumn == coldata)
{
<div class='item-context-menu fonticon-dropdown right'></div>
}
</td>
}
}
</tr>
}
    </tbody>
    </table>
    <div id='comments' class='hide'></div>
    <script type="text/javascript">
        $(document).ready(function () {
            gemini_items.initComments();
        });
    </script>
}

@if (IsAuthenticated)
{
    <ul id="item-grid-context-menu" class="cs-menu-context">
            <li><a href="#view">@GetResource(ResourceKeys.View)</a></li>
        <li><a href="#comment">@GetResource(ResourceKeys.Comment)</a></li>
        <li><a href="#edit">@GetResource(ResourceKeys.Edit)</a></li>
        <li class="separator"></li>
        <li ><a href="#pin">@GetResource(ResourceKeys.PinUnPin)</a></li>
        <li ><a href="#follow">@GetResource(ResourceKeys.FollowUnfollow)</a></li>
        <li class="separator"></li>
        <li class="highlight"><a href="#delete">@GetResource(ResourceKeys.Delete, Resourcing.Dotted)</a></li>
    </ul>
}
