@model InstantItemFilterModel
<div id="instant-filter-options" data-field-name="@Model.Options" data-field-desc="@Model.Options" class="instant-filter-box left"><div class="instant-filter-header left"><span class="instant-filter-title">@(Model.Options)</span><span class="instant-filter-caption">@Model.SelectedCaption</span></div><span class="fonticon-dropdown"></span>
<div class="instant-filter-dropdown auto-popup hide" data-field-type="custom">
<input class="fancy" type="checkbox" id="IncludeClosedItems" name="IncludeClosedItems" @if(Model.IncludeClosedItems) {<text>checked="checked"</text>} />
@Html.LabelFor(m => m.IncludeClosedItems, GetResource(ResourceKeys.FilterIncludeClosed), new { title = string.Concat('+', GetResource(ResourceKeys.Closed)) })<br />
<input class="fancy" type="checkbox" id="GroupDependencies" name="GroupDependencies" @if(Model.GroupDependencies) {<text>checked="checked"</text>} />
@Html.LabelFor(m => m.GroupDependencies, GetResource(ResourceKeys.GroupDependencies), new { title = GetResource(ResourceKeys.Grouped) })<br />
<input class="fancy" type="checkbox" id="ShowSequenced" name="ShowSequenced" @if(Model.ShowSequenced) {<text>checked="checked"</text>} />
@Html.LabelFor(m => m.ShowSequenced, GetResource(ResourceKeys.ShowSequence), new { title = GetResource(ResourceKeys.ShowSequence) })<br />
@Html.DropDownListFor(x => x.SelectedOptions, Model.StandardFilter, new { @class ="no-chosen" })
</div>
</div>